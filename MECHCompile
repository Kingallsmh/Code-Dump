using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//Notes section: 
// Use "= new Vector3()" or a already made vector3 when setting position.
//Position.set() or LocalPosition.Set() does not work.

//Make sure to set each attachmentObject to the attach tag

public class MECHCompile : MonoBehaviour
{

    public GameObject Torso, Leg, Head;
    GameObject nuTorso, nuLeg, nuHead;

    //TEMP
    public GameObject weaponL, weaponR;

    // Use this for initialization
    void Start()
    {
        //Torso
        nuTorso = Instantiate(Torso);
        nuTorso.transform.SetParent(this.transform);
        nuTorso.transform.localPosition = new Vector3(0, 0, 0);
        nuTorso.transform.rotation = nuTorso.transform.parent.rotation;
        //Head
        nuHead = Instantiate(Head);
        nuHead.transform.SetParent(this.transform);
        nuHead.transform.localPosition = new Vector3(0, 0, 0);
        nuHead.transform.rotation = nuHead.transform.parent.rotation;
        //Leg
        nuLeg = Instantiate(Leg);
        nuLeg.transform.SetParent(this.transform);
        nuLeg.transform.localPosition = new Vector3(0, 0, 0);
        nuLeg.transform.rotation = nuLeg.transform.parent.rotation;
        RearrangeParts();
        AttachWeapons();
    }

    void RearrangeParts()
    {
        ConfigureCamera(nuHead);
        Transform headTorsoAttachment = FindAttachPoint("TorsoAttach", nuHead);
        Transform torsoHeadAttachment = FindAttachPoint("HeadAttach", nuTorso);
        Transform torsoLegAttachment = FindAttachPoint("LegAttach", nuTorso);
        Transform legTorsoAttachment = FindAttachPoint("TorsoAttach", nuLeg);

        nuHead.transform.SetParent(torsoHeadAttachment);
        nuHead.transform.localPosition = (-headTorsoAttachment.localPosition);
        nuTorso.transform.SetParent(legTorsoAttachment);
        nuTorso.transform.localPosition = (-torsoLegAttachment.localPosition);
    }

    public Transform FindAttachPoint(string attachName, GameObject part)
    {
        List<Transform> tempList = part.GetComponent<MECHPart>().attachPoints;
        for (int i = 0; i < tempList.Count; i++)
        {
            if (tempList[i].tag == "PartAttach" && tempList[i].name == attachName)
            {
                return tempList[i];
            }
        }
        return null;
    }

    void ConfigureCamera(GameObject part)
    {
        //Find attach point which is child to Torso
        Transform camAtch = null;
        for (int i = 0; i < part.transform.childCount; i++)
        {
            if (part.transform.GetChild(i).tag == "CameraAttach")
            {
                camAtch = part.transform.GetChild(i);
                break;
            }
        }

        //Set camera to attach point and reset cam position and rotation
        Camera.main.transform.SetParent(camAtch.transform);
        Camera.main.transform.localPosition = new Vector3(0, 0, 0);
        Camera.main.transform.rotation = Camera.main.transform.parent.rotation;
    }

    void AttachWeapons(){
        if(nuTorso.GetComponent<MECHPart>().weaponPoints.Count > 0){
            GameObject weapon = Instantiate(weaponL);
            weapon.transform.SetParent(nuTorso.GetComponent<MECHPart>().weaponPoints[0]);
            weapon.transform.localPosition = GetAdjustmentPosition(weapon.transform, weapon.GetComponent<MECHWeapon>().attachPoint.transform);
            weapon.transform.localRotation = Quaternion.Euler(0, 0, 0);

            GameObject weapon2 = Instantiate(weaponR);
            weapon2.transform.SetParent(nuTorso.GetComponent<MECHPart>().weaponPoints[1]);
            weapon2.transform.localScale = new Vector3(-1, 1, 1);
            weapon2.transform.localPosition = GetAdjustmentPosition(weapon2.transform, weapon2.GetComponent<MECHWeapon>().attachPoint.transform);
            weapon2.transform.localRotation = Quaternion.Euler(0, 0, 0);

        }
    }

    Vector3 GetAdjustmentPosition(Transform a, Transform b){
        return a.position - b.position;
    }

    //TODO change this another system for parameter use
    public GameObject GetPart(int num)
    {
        if (num == 0)
        {
            return nuTorso;
        }
        else if (num == 1)
        {
            return nuLeg;
        }
        else if (num == 2)
        {
            return nuHead;
        }
        return null;
    }

    public Animator GetPartAnimation(GameObject part)
    {
        return part.GetComponent<Animator>();
    }
}
